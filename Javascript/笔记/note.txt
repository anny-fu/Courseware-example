一：变量
1.变量需先声明再调用，声明变量的关键字(var);变量声明后可以不用赋值。
2.变量不能重复声明，否则后声明的变量会覆盖前面的变量。
3.变量可以先声明后赋值;变量在没有赋值时，它的值为任意类型值，变量的类型时由赋给它的值决定的，属于软类型的变量。
4.变量命名应当遵守以下规则：
	1)只能以“英文字母”、“其他国家语言字符”、“_”（下划线）、“$”（美元符号）开头
	2)不能以“数字”及“其它特殊符号”（键盘上的符号）作为开头
	3)首个字符以后可以使用“数字”
	4)不能使用“关键字”和“保留字”作为变量名
	5)不是保留字，但具有一定意义的字符，如“Infinity”、“null”、“NaN”、“undefined”等

5.局部变量是定义function函数体内容部的变量,只能在函数体中使用,如声明时没有用var关键字,会变成一个全局变量。

6.类型转换函数：Number(),String(),Boolean();
数值类型：原始类型除去undefined和不是数字的字符串转换不成功，其他原始类型值均可转换为对应的数值。
对对象转换为NaN，首先用对象自身的valueOf方法，结果得到object,再调用对象的toString()方法，返回结果任然是一个字符串形式的对象。

字符串类型：原始类型值统一添加引号。
对对象转换结果为"[object Object]";先用对象自身的toString方法转换，得到结果就是一个为字符串的对象，不需要再调用valueOf()方法。

布尔类型：
转换结果为false的值：undefined,null,'',0,-0,+0,NaN;
其他的都为true。

7.运算符
1).拼接运算符(+),当加号遇到字符串就变成拼接运算符。
2).自增(++),自减(--),在变量之前，先自增或自减再输出，在变量之后，先输出再做自增或自减运算。
3).赋值运算符(=),把右边的值赋给左边的变量。

8.二元运算符
与(&&),或(||),非(!)

&&:如果两边的表达式结果都为true，返回结果是第二表达式的结果，如果任何一个为false，返回为false的那个一个表达式的值。

||:如果两边都为false，返回结果是第二个表达式的值。
如果其中一个为true，返回结果是为true的那个表达式的值。

9.结构
三元运算表达式：条件 ? 结果1 : 结果2;条件为true返回结果1,反之为结果2。

if结构：
if(条件){ //条件为true输出的结果 }

if(条件){//条件为true输出的结果}else{//条件为false输出的结果}

if(条件1){//满足第一个条件时输出的结果}
else if(条件2){//满足第二个条件时输出的结果}
else if(条件3){//满足第三个条件时输出的结果}
else{//条件3为false输出的结果}
 
if(条件){
	if(条件){}else{}
}else{
	if(条件){}else{}
}

switch结构：

switch(条件){
	case 结果1:
	//输出信息
	break;
	case 结果2:
	//输出信息
	break;
	....
	default:
	//以上结果都不符合的时候输出
	break;
}

switch(条件){
	case 结果1: case 结果3: case 结果4:
	//输出信息
	break;
	case 结果2: case 结果4:
	//输出信息
	break;
	....
	default:
	//以上结果都不符合的时候输出
	break;
}

10.循环
while循环：while(条件表达式){循环体、递增条件}

do while循环：do{循环体}while(条件表达式);
区别：do-while至少会执行一次循环体。

for(初始化表达式;条件表达式;递增表达式){循环体}

11.中断语句和跳出语句
continue：终止本次循环,继续进入下一次循环。
break：中断跳出程序。
return：返回结果，中断程序。（必须放在函数作用域中使用，在全局作用域中会报错。）

12.循环遍历
for-in：for(x in obj){遍历输出}


13.数值
数值表示的范围:负的2的53次方减一到正的2的53次方减一;
判断一个值是否是数值：isNaN();

数值的常用的四种进制：
二进制：前导数：0b|0B,数值只能为0或1
十进制：正常的阿拉伯数字(正数，负数，小数)
八进制：前导数：0o|0O,数值只能是0-7之间的数
十六进制：前导数：0x|0X,数值范围：0-9,a-f;

数值对象的四舍五入方法：
toFixed(n);n有效值0-20;

科学计数法表示：
位数超过21位；小数点后的位数超过21位；小数点后的0连续多余5个；

数值转换：
parseInt();将其他类型值转换为整数形式。
转换二进制和八进制，科学计数法数时,不能给数值加引号，如果设置了第二个参数，可以加引号，但是不加进制的前导。
例：parseInt(0b0011);
parseInt('0011',2);
parseInt(123e3);

parseFloat();将其他类型值转换为浮点数形式。
可以对参数是字符串形式的科学计数法进行转换。
例：parseFloat('3292e2');parseFloat(3292e2);

Number()构造函数：
与parseInt不同:Number函数对参数不是纯数字形式的字符串转换不成功。
与parsefloat不同：Number函数可以将布尔类型的（true/false）和 null 转换为数值。不能转换数值字符串中带有其他类型字符。


数组方法：
一、不改变原数组
join(分割符);数组转换字符串输出
slice(startIndex,endIndex);
map(function(数组成员,下标,数组本身){});
forEach(function(数组成员,下标,数组本身){},this(告诉函数内部的this指向));
filter(function(数组成员,下标,数组本身){});

some(function(数组成员,下标,数组本身){//判断结果中有一个为true，返回结果为true});
every(function(数组成员,下标,数组本身){//判断结果中有一个结果为false，返回结果为false});

reduce(function(item1,item2,index,arr){//从左到右进行累加});
reduceRight(function(item1,item2,index,arr){//从右到左进行累加});

indexOf();//判断元素是否存在于数组中，如果有返回元素下标，没有返回-1
lastIndexOf();

二、会改变原数组
reverse();//反序输出
splice(startIndex,length,params,params...);
sort(function(a,b){return a - b;//a-b是升序，b-a降序 });
push(数组成员);//从数组的介绍位置添加或插入
unshift(数组成员);//与push方法相反
pop();//删除数组最后一个元素，一次只删除一个，无参
shift();//删除数组第一个元素，每次删除一个，无参


DOM：
一.节点属性
顶层节点Document,每个节点都是一个对象
共有属性：
nodeName：节点名称
nodeType：节点类型
nodeValue:节点值

常见的节点分类：
元素节点：大写标签名，1，null或undefined
属性节点：属性名，2，属性值
文本节点：#text，3，文本内容

Node.textContent:可读可写，获取或修改节点文本内容，不对标签做解析。
Node.ownerDocument:返回节点对象所在的顶层文档对象(document)。


查找节点属性：
Node.parentNode:查找当前节点的父节点(Element，document，documentfragment)
Node.parentElement:查找当前节点的父元素节点

Node.nextSibling:返回紧跟当前节点后面的第一个同级节点
Node.previousSibling:返回紧跟当前节点前面的第一个同级节点
Node.nextElementSibling：返回当前节点后面的第一个同级元素节点(不包含空格换行符，注释等节点)
Node.previousElementSibling:同级的上一个元素节点

Node.childNodes:返回当前节点的所有子节点(包含Text，注释节点)，类似于数组的集合
Node.children:返回由Element节点组成的集合。
Node.firstChild和Node.lastChild：返回当前节点的第一个或最后一个子节点
Node.firstElementChild和Node.lastElementChild：返回当前节点的第一个或最后一个子元素节点
Node.childElementCount:返回当前节点的所有子元素节点的个数


DOM节点方法：
Node.appendChild(节点):插入当前节点的最后一个子节点
Node.insertBefore(新子节点,指定插入的子节点)：将某个节点插入当前节点的指定子节点位置的前面。
Node.removeChild(子节点)：移除当前节点指定子节点，返回移除的子节点
Node.replaceChild(新子节点,指定被替换子节点);
Node.cloneNode(blooean):克隆一个节点，true:要克隆子节点，false：不克隆子节点
Node.hasChildNodes()：判断当前节点是否有子节点；true:有，false:没有。
Node.contains(节点)：判断参数节点是否为当前节点的后代节点
Node.isEqualNode(节点)：判断两个节点是否相等
Node.normalize():清理当前节点内部的所有Text节点，去除空的文本节点，将相邻的两个文本节点合并。


DOM节点的查询：
document.getElementById():获取指定id的元素,返回一个元素对象
document.getElementsByClassName():获取指定class的元素，返回的是一个对象集合。
document.getElementsByTagName():获取指定标签名的元素，返回对象集合。
document.getElementsByName()：获取指定标签的name属性元素。返回对象集合
document.querySelector(选择器):获取匹配该参数选择器的第一个元素节点。
document.querySelectorAll(选择器)：获取匹配该参数选择器的所有元素节点。返回对象集合

DOM节点的生成：
document.createElement(标签名);生成元素节点
document.createTextNode(文本内容);生成文本节点
document.createAttribute(属性名);创建属性节点
Element.setAttributeNode(属性节点);将属性节点参数设置到创建好的元素节点对象上。

操作属性：
Element.getAttribute(属性名);获取匹配属性名参数的当前元素的属性，返回属性值
Element.setAttribute(属性名,属性值);为当前元添加或新增属性
Element.removeAttribute(属性名);移除当前元素的指定属性
Element.hasAttribute(属性名);判断当前元素节点是否包含指定属性

获取或设置自定义属性：
比如：<input type="text" data-info= "Anny">
Element.dataset.info;获取对应的属性值
Element.dataset.info = 'Tom';为自定义属性设置属性值


Element节点对象：
属性：
Ele.attributes:返回当前元素所有的属性节点，数组对象集合。
Ele.id:返回指定元素的id属性，可读可写属性
Ele.tagName:返回指定元素的大写标签名
Ele.innerHTML:返回指定元素包含的HTML代码，可读可写。
Ele.outerHTML:返回指定元素自身和包含的所有HTML代码，可读可写。
方法：
Ele.match(CSS选择器):匹配当前的Element节点上是否存在参数内的选择器字符串。
Ele.focus():使当前元素可获得焦点。
Ele.remove(子节点):删除当前元素指定的子节点。

文档片段节点对象(DocumentFragment)：
实例化文片段对象：
var docfrag = new DocumentFragment();
或
var docfrag = document.createDocumentFragment();


style对象：
用法一：Ele.style.css样式名 = '样式属性值';
用法二：Ele.style.cssText = 'css样式';

CSS样式属性操作：
(1):元素没有对应的class属性时：
Ele.className = '属性值';添加或获取元素属性值。
(2):当前元素已经存在对应的class属性
添加：Ele.className += ' '+ classValue;
删除：Ele.className = Ele.className.replace(classValue,'');

classList对象：
Ele.classList：返回一个对象集合
方法：
Ele.classList.add()：增加一个class
Ele.classList.remove():移除一个class
Ele.classList.contains():坚持当前元素是否包含指定的class
Ele.classList.toggle(classValue,true||false);
检查当前元素是否有指定的class,如果存在就删除，反之添加。
Ele.classList.item():返回指定索引对应的class
Ele.classList.toString()：将对应的class列表转为字符串形式

正则对象(RegExp)
1.修饰符：
i:忽略大小写
g:全局匹配,（可以多次匹配），会跳过剩余字符中不匹配的字符
m:多行匹配
u:匹配大于Unicode码点未"\uFFFF"的字符
y:粘连修饰符，作用和g类似。会从匹配成功后的第一个字符位置开始继续匹配。

正则验证方法：
test();返回布尔类型值，匹配成功为true，否则为false。
exec();返回匹配成功的结果(数组)，没有就为null。

元字符：
点字符(.):除指定字符外的任意一个字符。
脱字符(^):限定开始位置字符
美元符($):限定结束位置字符。
中括号([]):匹配字符串其中一个与“[]”相同。
竖线符(|):表示或。只需匹配正则中的任何一个即可。
连字符(-):表示一个连续的范围，ASCII编码的一个字符范围。[a-zA-Z]
小括号('()'):表示匹配一组完整的内容。

问号(?)：匹配字符串中指定的字符可出现0次或1次。
星号(*)：匹配字符串中指定字符可以出现0次或多次。
加号(+)：匹配的内容至少要出现一次。
大括符({})：
{n}:匹配的内容可以连续出现n次
{n,}:匹配的内容至少出现n。
{n,m}:匹配的内容至少出现n次,最多出现m次。

预定义模式(简写模式)：
\d:匹配0-9之间的任意一个数字，等同于[0-9]
\D:匹配所有0-9以外的字符，等同于[^0-9]
\w:匹配任意字母、数字和下划线，等同于[A-Za-z0-9_]
\W:匹配除任意字母、数字和下划线以为的字符，等同于[^A-Za-z0-9_]
\s:匹配空格(包含制表符，空格，换行符等)，等同于[\t\r\n\v\f]
\S:匹配非空格的字符，等同于[……\t\r\n\v\f]
\b:匹配词的边界
\B:匹配非词边界，即在词的内部。


复合模式：
验证用户密码:以字母开头，长度在6~18之间，只能包含字符、数字和下划线:(/^[a-zA-Z]\w{5,17}$/)
只能输入汉字：(/^[\u4e00-\u9fa5]{0,}$/)
验证手机号码：(/^((\d{3,4}-)|\d{3,4}-)?\d{7,8}$/)或（/^1(3|4|5|7|8)\d{9}$/）
验证固定电话和手机号码：（/^((0\d{2,3}-\d{7,8})|(1[3584]\d{9}))$/）
验证身份证号（15位或18位数字）：(/^[1-9]\d{14}|^[1-9]\d{17}|^[1-9]\d{16}x/)
匹配ip地址：(/\d+\.\d+\.\d+\.\d+/)
匹配文件压缩包：(/^[\w]+\.zip|rar|gz/)
验证Email地址：(/^\w+@[a-z0-9]+\.([a-z]){1,3}$/)或(/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$ /)
URL：(/(\w+):\/\/([\w.]+)\/(\s*)/)
匹配腾讯QQ号：(/^[1-9][0-9]{4,}/)
匹配中国邮政编码：(/[1-9]\d{5}(?!\d)/)
匹配html标签的正则表达式：(/<(.*)>(.*)<\/(.*)>|<(.*)\/>/)
匹配首尾空格的正则表达式：(/(^\s*)|(\s*$)/)


JSON对象：
概念：JSON格式（JavaScript Object Notation的缩写）是一种用于数据交换的文本格式，2001年由Douglas Crockford提出，目的是取代繁琐笨重的XML格式。

相比XML格式，JSON格式有两个显著的优点：书写简单，一目了然；符合JavaScript原生语法，可以由解释引擎直接处理，不用另外添加解析代码。所以，JSON迅速被接受，已经成为各大网站交换数据的标准格式，并被写入ECMAScript 5，成为标准的一部分。简单说，每个JSON对象，就是一个值。要么是简单类型的值，要么是复合类型的值，但是只能是一个值，不能是两个或更多的值。这就是说，每个JSON文档只能包含一个值。

JSON对值的类型和格式有严格的规定:

复合类型的值只能是数组或对象，不能是函数、正则表达式对象、日期对象。
简单类型的值只有四种：字符串、数值（必须以十进制表示）、布尔值和null（不能使用NaN, Infinity, -Infinity和undefined,不能使用函数和日期对象）。
字符串必须使用双引号表示，不能使用单引号。
对象的键名必须放在双引号里面。
json可以是数组或对象格式，数组和对象的最后一个成员后面，不能加逗号。

合格的JSON：
["one","two","three"]
{"names":["张三","李四"]}
[{"name":"张三"},{"name":"李四"}]

不合格的JSON:
{name:"张三",'age':32}//属性名必须使用双引号
[32,65,120,0xFFF]//不能使用十六进制值
{"name":"张三","age":undefined}//不能使用undefined


JSON方法:
JSON.stringify():用于将一个值转为字符串。该字符串应该符合JSON格式，并且可以被JSON.parse方法还原。
JSON.parse():用于将JSON字符串转化成对象。



